{"ast":null,"code":"var _jsxFileName = \"/Users/hyukjin/ReactProjects/ReactDemoProject/src/components/Chart/Chart.js\";\nimport React from 'react';\nimport ChartBar from './ChartBar'; // ChartBar 컴포넌트를 가져온다.\nimport './Chart.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chart = props => {\n  const dataPointValues = props.dataPoints.map(dataPoint => dataPoint.value); // dataPoints 배열에서 각 데이터 포인트의 value 값을 추출하여 배열로 저장한다.\n  const totalMaximum = Math.max(...dataPointValues); // dataPoints 배열의 value 값 중에서 최대값을 구한다.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart\",\n    children: props.dataPoints.map(dataPoint => /*#__PURE__*/_jsxDEV(ChartBar, {\n      // React에서 배열 요소를 렌더링할 때 key 속성을 필요로 한다. label 값을 사용한다.\n      value: dataPoint.value // 현재 데이터 포인트의 value 값을 전달한다.\n      ,\n      maxValue: totalMaximum // 모든 데이터 포인트의 value 값 중에서 최대값을 전달한다.\n      ,\n      label: dataPoint.label // 현재 데이터 포인트의 label 값을 전달한다.\n    }, dataPoint.label, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n_c = Chart;\nexport default Chart;\nvar _c;\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"names":["React","ChartBar","jsxDEV","_jsxDEV","Chart","props","dataPointValues","dataPoints","map","dataPoint","value","totalMaximum","Math","max","className","children","maxValue","label","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hyukjin/ReactProjects/ReactDemoProject/src/components/Chart/Chart.js"],"sourcesContent":["import React from 'react';\n\nimport ChartBar from './ChartBar'; // ChartBar 컴포넌트를 가져온다.\nimport './Chart.css';\n\nconst Chart = (props) => {\n  const dataPointValues = props.dataPoints.map(dataPoint => dataPoint.value); // dataPoints 배열에서 각 데이터 포인트의 value 값을 추출하여 배열로 저장한다.\n  const totalMaximum = Math.max(...dataPointValues); // dataPoints 배열의 value 값 중에서 최대값을 구한다.\n\n  return (\n    <div className='chart'>\n      {/* dataPoints 배열을 순회하며, 각 데이터 포인트를 ChartBar 컴포넌트로 렌더링한다. */}\n      {props.dataPoints.map((dataPoint) => (\n        <ChartBar\n          key={dataPoint.label} // React에서 배열 요소를 렌더링할 때 key 속성을 필요로 한다. label 값을 사용한다.\n          value={dataPoint.value} // 현재 데이터 포인트의 value 값을 전달한다.\n          maxValue={totalMaximum} // 모든 데이터 포인트의 value 값 중에서 최대값을 전달한다.\n          label={dataPoint.label} // 현재 데이터 포인트의 label 값을 전달한다.\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default Chart;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAOC,QAAQ,MAAM,YAAY,CAAC,CAAC;AACnC,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,MAAMC,KAAK,GAAIC,KAAK,IAAK;EACvB,MAAMC,eAAe,GAAGD,KAAK,CAACE,UAAU,CAACC,GAAG,CAACC,SAAS,IAAIA,SAAS,CAACC,KAAK,CAAC,CAAC,CAAC;EAC5E,MAAMC,YAAY,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGP,eAAe,CAAC,CAAC,CAAC;;EAEnD,oBACEH,OAAA;IAAKW,SAAS,EAAC,OAAO;IAAAC,QAAA,EAEnBV,KAAK,CAACE,UAAU,CAACC,GAAG,CAAEC,SAAS,iBAC9BN,OAAA,CAACF,QAAQ;MACe;MACtBS,KAAK,EAAED,SAAS,CAACC,KAAM,CAAC;MAAA;MACxBM,QAAQ,EAAEL,YAAa,CAAC;MAAA;MACxBM,KAAK,EAAER,SAAS,CAACQ,KAAM,CAAC;IAAA,GAHnBR,SAAS,CAACQ,KAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAKvB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACE;AAEV,CAAC;AAACC,EAAA,GAjBIlB,KAAK;AAmBX,eAAeA,KAAK;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}